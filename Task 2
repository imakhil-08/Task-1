import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

class Stock {
    private String symbol;
    private double price;

    public Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }

    public String getSymbol() {
        return symbol;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

}

class Portfolio {
    private Map<String, Integer> stocks;
    private double balance;

    public Portfolio() {
        this.stocks = new HashMap<>();
        this.balance = 10000.0;
    }

    public void buyStock(Stock stock, int quantity) {
        if (balance >= stock.getPrice() * quantity) {
            balance -= stock.getPrice() * quantity;
            if (stocks.containsKey(stock.getSymbol())) {
                stocks.put(stock.getSymbol(), stocks.get(stock.getSymbol()) + quantity);
            } else {
                stocks.put(stock.getSymbol(), quantity);
            }
            System.out.println("Bought " + quantity + " shares of " + stock.getSymbol() + " at $" + stock.getPrice());
        } else {
            System.out.println("Insufficient balance");
        }
    }

    public void sellStock(Stock stock, int quantity) {
        if (stocks.containsKey(stock.getSymbol()) && stocks.get(stock.getSymbol()) >= quantity) {
            balance += stock.getPrice() * quantity;
            stocks.put(stock.getSymbol(), stocks.get(stock.getSymbol()) - quantity);
            System.out.println("Sold " + quantity + " shares of " + stock.getSymbol() + " at $" + stock.getPrice());
        } else {
            System.out.println("Insufficient shares");
        }
    }

    public void printPortfolio() {
        System.out.println("Portfolio:");
        for (Map.Entry<String, Integer> entry : stocks.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue() + " shares");
        }
        System.out.println("Balance: $" + balance);
    }
}

public class StockTradingPlatform {
    private Map<String, Stock> stocks;
    private Portfolio portfolio;

    public StockTradingPlatform() {
        this.stocks = new HashMap<>();
        this.portfolio = new Portfolio();
        this.stocks.put("AAPL", new Stock("AAPL", 150.0));
        this.stocks.put("GOOG", new Stock("GOOG", 2500.0));
        this.stocks.put("MSFT", new Stock("MSFT", 200.0));
    }

    public void printMarketData() {
        System.out.println("Market Data:");
        for (Stock stock : stocks.values()) {
            System.out.println(stock.getSymbol() + ": $" + stock.getPrice());
        }
    }

    public void run() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Print Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. Print Portfolio");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    printMarketData();
                    break;
                case 2:
                    System.out.print("Enter stock symbol: ");
                    String symbol = scanner.next();
                    System.out.print("Enter quantity: ");
                    int quantity = scanner.nextInt();
                    if (stocks.containsKey(symbol)) {
                        portfolio.buyStock(stocks.get(symbol), quantity);
                    } else {
                        System.out.println("Invalid stock symbol");
                    }
                    break;
                case 3:
                    System.out.print("Enter stock symbol: ");
                    symbol = scanner.next();
                    System.out.print("Enter quantity: ");
                    quantity = scanner.nextInt();
                    if (stocks.containsKey(symbol)) {
                        portfolio.sellStock(stocks.get(symbol), quantity);
                    } else {
                        System.out.println("Invalid stock symbol");
                    }
                    break;
                case 4:
                    portfolio.printPortfolio();
                    break;
                case 5:
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice");
            }
        }
    }

    public static void main(String[] args) {
        StockTradingPlatform platform = new StockTradingPlatform();
        platform.run();
    }
}
